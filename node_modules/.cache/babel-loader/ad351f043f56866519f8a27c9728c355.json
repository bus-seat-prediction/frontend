{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport React from 'react';\nimport createElement from './create-element';\nimport checkForListedLanguage from './checkForListedLanguage';\nvar newLineRegex = /\\n/g;\n\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getAllLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      style = _ref.style;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    return React.createElement(\"span\", {\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\",\n      style: typeof style === 'function' ? style(number) : style\n    }, \"\".concat(number, \"\\n\"));\n  });\n}\n\nfunction AllLineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      codeStyle = _ref2.codeStyle,\n      _ref2$containerStyle = _ref2.containerStyle,\n      containerStyle = _ref2$containerStyle === void 0 ? {\n    float: 'left',\n    paddingRight: '10px'\n  } : _ref2$containerStyle,\n      _ref2$numberStyle = _ref2.numberStyle,\n      numberStyle = _ref2$numberStyle === void 0 ? {} : _ref2$numberStyle,\n      startingLineNumber = _ref2.startingLineNumber;\n  return React.createElement(\"code\", {\n    style: Object.assign({}, codeStyle, containerStyle)\n  }, getAllLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    style: numberStyle,\n    startingLineNumber: startingLineNumber\n  }));\n}\n\nfunction getEmWidthOfNumber(num) {\n  return \"\".concat(num.toString().length, \".25em\");\n}\n\nfunction getInlineLineNumber(lineNumber, inlineLineNumberStyle) {\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: {\n      key: \"line-number--\".concat(lineNumber),\n      className: ['comment', 'linenumber', 'react-syntax-highlighter-line-number'],\n      style: inlineLineNumberStyle\n    },\n    children: [{\n      type: 'text',\n      value: lineNumber\n    }]\n  };\n}\n\nfunction assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber) {\n  // minimally necessary styling for line numbers\n  var defaultLineNumberStyle = {\n    display: 'inline-block',\n    minWidth: getEmWidthOfNumber(largestLineNumber),\n    paddingRight: '1em',\n    textAlign: 'right',\n    userSelect: 'none'\n  }; // prep custom styling\n\n  var customLineNumberStyle = typeof lineNumberStyle === 'function' ? lineNumberStyle(lineNumber) : lineNumberStyle; // combine\n\n  var assembledStyle = _objectSpread({}, defaultLineNumberStyle, customLineNumberStyle);\n\n  return assembledStyle;\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineNumberStyle = _ref3.lineNumberStyle,\n      largestLineNumber = _ref3.largestLineNumber,\n      showInlineLineNumbers = _ref3.showInlineLineNumbers,\n      _ref3$lineProps = _ref3.lineProps,\n      lineProps = _ref3$lineProps === void 0 ? {} : _ref3$lineProps,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? [] : _ref3$className,\n      showLineNumbers = _ref3.showLineNumbers,\n      wrapLongLines = _ref3.wrapLongLines;\n  var properties = typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps;\n  properties['className'] = className;\n\n  if (lineNumber && showInlineLineNumbers) {\n    var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n    children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n  }\n\n  if (wrapLongLines & showLineNumbers) {\n    properties.style = _objectSpread({}, properties.style, {\n      display: 'flex'\n    });\n  }\n\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: _toConsumableArray(new Set(className))\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\n    }\n  }\n\n  return newTree;\n}\n\nfunction processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines) {\n  var _ref4;\n\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  function createWrappedLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return createLineElement({\n      children: children,\n      lineNumber: lineNumber,\n      lineNumberStyle: lineNumberStyle,\n      largestLineNumber: largestLineNumber,\n      showInlineLineNumbers: showInlineLineNumbers,\n      lineProps: lineProps,\n      className: className,\n      showLineNumbers: showLineNumbers,\n      wrapLongLines: wrapLongLines\n    });\n  }\n\n  function createUnwrappedLine(children, lineNumber) {\n    if (showLineNumbers && lineNumber && showInlineLineNumbers) {\n      var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n      children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n    }\n\n    return children;\n  }\n\n  function createLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return wrapLines || className.length > 0 ? createWrappedLine(children, lineNumber, className) : createUnwrappedLine(children, lineNumber);\n  }\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        }; // if it's the first line\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n\n          var _line = createLine(_children, lineNumber);\n\n          newTree.push(_line); // if it's the last line\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n\n          if (stringChild) {\n            var lastLineInPreviousSpan = {\n              type: 'text',\n              value: \"\".concat(text)\n            };\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            var _children2 = [newChild];\n\n            var _line2 = createLine(_children2, lineNumber, node.properties.className);\n\n            newTree.push(_line2);\n          } // if it's neither the first nor the last line\n\n        } else {\n          var _children3 = [newChild];\n\n          var _line3 = createLine(_children3, lineNumber, node.properties.className);\n\n          newTree.push(_line3);\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\n    if (children && children.length) {\n      var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n      var line = createLine(children, lineNumber);\n      newTree.push(line);\n    }\n  }\n\n  return wrapLines ? newTree : (_ref4 = []).concat.apply(_ref4, newTree);\n}\n\nfunction defaultRenderer(_ref5) {\n  var rows = _ref5.rows,\n      stylesheet = _ref5.stylesheet,\n      useInlineStyles = _ref5.useInlineStyles;\n  return rows.map(function (node, i) {\n    return createElement({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n} // only highlight.js has the highlightAuto method\n\n\nfunction isHighlightJs(astGenerator) {\n  return astGenerator && typeof astGenerator.highlightAuto !== 'undefined';\n}\n\nfunction getCodeTree(_ref6) {\n  var astGenerator = _ref6.astGenerator,\n      language = _ref6.language,\n      code = _ref6.code,\n      defaultCodeValue = _ref6.defaultCodeValue; // figure out whether we're using lowlight/highlight or refractor/prism\n  // then attempt highlighting accordingly\n  // lowlight/highlight?\n\n  if (isHighlightJs(astGenerator)) {\n    var hasLanguage = checkForListedLanguage(astGenerator, language);\n\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  } // must be refractor/prism, then\n\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\n\nexport default function (defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref7) {\n    var language = _ref7.language,\n        children = _ref7.children,\n        _ref7$style = _ref7.style,\n        style = _ref7$style === void 0 ? defaultStyle : _ref7$style,\n        _ref7$customStyle = _ref7.customStyle,\n        customStyle = _ref7$customStyle === void 0 ? {} : _ref7$customStyle,\n        _ref7$codeTagProps = _ref7.codeTagProps,\n        codeTagProps = _ref7$codeTagProps === void 0 ? {\n      className: language ? \"language-\".concat(language) : undefined,\n      style: _objectSpread({}, style['code[class*=\"language-\"]'], style[\"code[class*=\\\"language-\".concat(language, \"\\\"]\")])\n    } : _ref7$codeTagProps,\n        _ref7$useInlineStyles = _ref7.useInlineStyles,\n        useInlineStyles = _ref7$useInlineStyles === void 0 ? true : _ref7$useInlineStyles,\n        _ref7$showLineNumbers = _ref7.showLineNumbers,\n        showLineNumbers = _ref7$showLineNumbers === void 0 ? false : _ref7$showLineNumbers,\n        _ref7$showInlineLineN = _ref7.showInlineLineNumbers,\n        showInlineLineNumbers = _ref7$showInlineLineN === void 0 ? true : _ref7$showInlineLineN,\n        _ref7$startingLineNum = _ref7.startingLineNumber,\n        startingLineNumber = _ref7$startingLineNum === void 0 ? 1 : _ref7$startingLineNum,\n        lineNumberContainerStyle = _ref7.lineNumberContainerStyle,\n        _ref7$lineNumberStyle = _ref7.lineNumberStyle,\n        lineNumberStyle = _ref7$lineNumberStyle === void 0 ? {} : _ref7$lineNumberStyle,\n        wrapLines = _ref7.wrapLines,\n        _ref7$wrapLongLines = _ref7.wrapLongLines,\n        wrapLongLines = _ref7$wrapLongLines === void 0 ? false : _ref7$wrapLongLines,\n        _ref7$lineProps = _ref7.lineProps,\n        lineProps = _ref7$lineProps === void 0 ? {} : _ref7$lineProps,\n        renderer = _ref7.renderer,\n        _ref7$PreTag = _ref7.PreTag,\n        PreTag = _ref7$PreTag === void 0 ? 'pre' : _ref7$PreTag,\n        _ref7$CodeTag = _ref7.CodeTag,\n        CodeTag = _ref7$CodeTag === void 0 ? 'code' : _ref7$CodeTag,\n        _ref7$code = _ref7.code,\n        code = _ref7$code === void 0 ? Array.isArray(children) ? children[0] : children : _ref7$code,\n        astGenerator = _ref7.astGenerator,\n        rest = _objectWithoutProperties(_ref7, [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"showInlineLineNumbers\", \"startingLineNumber\", \"lineNumberContainerStyle\", \"lineNumberStyle\", \"wrapLines\", \"wrapLongLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"]);\n\n    astGenerator = astGenerator || defaultAstGenerator;\n    var allLineNumbers = showLineNumbers ? React.createElement(AllLineNumbers, {\n      containerStyle: lineNumberContainerStyle,\n      codeStyle: codeTagProps.style || {},\n      numberStyle: lineNumberStyle,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var generatorClassName = isHighlightJs(astGenerator) ? 'hljs' : 'prismjs';\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: rest.className ? \"\".concat(generatorClassName, \" \").concat(rest.className) : generatorClassName,\n      style: Object.assign({}, customStyle)\n    });\n\n    if (!astGenerator) {\n      return React.createElement(PreTag, preProps, allLineNumbers, React.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * Some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined.\n     */\n\n\n    if (wrapLines === undefined && renderer || wrapLongLines) wrapLines = true;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    } // determine largest line number so that we can force minWidth on all linenumber elements\n\n\n    var largestLineNumber = codeTree.value.length + startingLineNumber;\n    var rows = processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines);\n\n    if (wrapLongLines) {\n      codeTagProps.style = _objectSpread({}, codeTagProps.style, {\n        whiteSpace: 'pre-wrap'\n      });\n    } else {\n      codeTagProps.style = _objectSpread({}, codeTagProps.style, {\n        whiteSpace: 'pre'\n      });\n    }\n\n    return React.createElement(PreTag, preProps, React.createElement(CodeTag, codeTagProps, !showInlineLineNumbers && allLineNumbers, renderer({\n      rows: rows,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}","map":{"version":3,"names":["_objectWithoutProperties","_toConsumableArray","_objectSpread","React","createElement","checkForListedLanguage","newLineRegex","getNewLines","str","match","getAllLineNumbers","_ref","lines","startingLineNumber","style","map","_","i","number","key","concat","className","AllLineNumbers","_ref2","codeString","codeStyle","_ref2$containerStyle","containerStyle","float","paddingRight","_ref2$numberStyle","numberStyle","Object","assign","replace","split","getEmWidthOfNumber","num","toString","length","getInlineLineNumber","lineNumber","inlineLineNumberStyle","type","tagName","properties","children","value","assembleLineNumberStyles","lineNumberStyle","largestLineNumber","defaultLineNumberStyle","display","minWidth","textAlign","userSelect","customLineNumberStyle","assembledStyle","createLineElement","_ref3","showInlineLineNumbers","_ref3$lineProps","lineProps","_ref3$className","showLineNumbers","wrapLongLines","unshift","flattenCodeTree","tree","arguments","undefined","newTree","node","push","Set","classNames","processLines","codeTree","wrapLines","_ref4","lastLineBreakIndex","index","createWrappedLine","createUnwrappedLine","createLine","_loop","newLines","splitValue","forEach","text","newChild","_children","slice","_line","stringChild","lastLineInPreviousSpan","newElem","splice","_children2","_line2","_children3","_line3","line","apply","defaultRenderer","_ref5","rows","stylesheet","useInlineStyles","isHighlightJs","astGenerator","highlightAuto","getCodeTree","_ref6","language","code","defaultCodeValue","hasLanguage","highlight","e","defaultAstGenerator","defaultStyle","SyntaxHighlighter","_ref7","_ref7$style","_ref7$customStyle","customStyle","_ref7$codeTagProps","codeTagProps","_ref7$useInlineStyles","_ref7$showLineNumbers","_ref7$showInlineLineN","_ref7$startingLineNum","lineNumberContainerStyle","_ref7$lineNumberStyle","_ref7$wrapLongLines","_ref7$lineProps","renderer","_ref7$PreTag","PreTag","_ref7$CodeTag","CodeTag","_ref7$code","Array","isArray","rest","allLineNumbers","defaultPreStyle","hljs","backgroundColor","generatorClassName","preProps","whiteSpace"],"sources":["/Users/saehee/material-kit-react-main/node_modules/react-syntax-highlighter/dist/esm/highlight.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport React from 'react';\nimport createElement from './create-element';\nimport checkForListedLanguage from './checkForListedLanguage';\nvar newLineRegex = /\\n/g;\n\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getAllLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      style = _ref.style;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    return React.createElement(\"span\", {\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\",\n      style: typeof style === 'function' ? style(number) : style\n    }, \"\".concat(number, \"\\n\"));\n  });\n}\n\nfunction AllLineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      codeStyle = _ref2.codeStyle,\n      _ref2$containerStyle = _ref2.containerStyle,\n      containerStyle = _ref2$containerStyle === void 0 ? {\n    float: 'left',\n    paddingRight: '10px'\n  } : _ref2$containerStyle,\n      _ref2$numberStyle = _ref2.numberStyle,\n      numberStyle = _ref2$numberStyle === void 0 ? {} : _ref2$numberStyle,\n      startingLineNumber = _ref2.startingLineNumber;\n  return React.createElement(\"code\", {\n    style: Object.assign({}, codeStyle, containerStyle)\n  }, getAllLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    style: numberStyle,\n    startingLineNumber: startingLineNumber\n  }));\n}\n\nfunction getEmWidthOfNumber(num) {\n  return \"\".concat(num.toString().length, \".25em\");\n}\n\nfunction getInlineLineNumber(lineNumber, inlineLineNumberStyle) {\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: {\n      key: \"line-number--\".concat(lineNumber),\n      className: ['comment', 'linenumber', 'react-syntax-highlighter-line-number'],\n      style: inlineLineNumberStyle\n    },\n    children: [{\n      type: 'text',\n      value: lineNumber\n    }]\n  };\n}\n\nfunction assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber) {\n  // minimally necessary styling for line numbers\n  var defaultLineNumberStyle = {\n    display: 'inline-block',\n    minWidth: getEmWidthOfNumber(largestLineNumber),\n    paddingRight: '1em',\n    textAlign: 'right',\n    userSelect: 'none'\n  }; // prep custom styling\n\n  var customLineNumberStyle = typeof lineNumberStyle === 'function' ? lineNumberStyle(lineNumber) : lineNumberStyle; // combine\n\n  var assembledStyle = _objectSpread({}, defaultLineNumberStyle, customLineNumberStyle);\n\n  return assembledStyle;\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineNumberStyle = _ref3.lineNumberStyle,\n      largestLineNumber = _ref3.largestLineNumber,\n      showInlineLineNumbers = _ref3.showInlineLineNumbers,\n      _ref3$lineProps = _ref3.lineProps,\n      lineProps = _ref3$lineProps === void 0 ? {} : _ref3$lineProps,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? [] : _ref3$className,\n      showLineNumbers = _ref3.showLineNumbers,\n      wrapLongLines = _ref3.wrapLongLines;\n  var properties = typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps;\n  properties['className'] = className;\n\n  if (lineNumber && showInlineLineNumbers) {\n    var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n    children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n  }\n\n  if (wrapLongLines & showLineNumbers) {\n    properties.style = _objectSpread({}, properties.style, {\n      display: 'flex'\n    });\n  }\n\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: _toConsumableArray(new Set(className))\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\n    }\n  }\n\n  return newTree;\n}\n\nfunction processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines) {\n  var _ref4;\n\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  function createWrappedLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return createLineElement({\n      children: children,\n      lineNumber: lineNumber,\n      lineNumberStyle: lineNumberStyle,\n      largestLineNumber: largestLineNumber,\n      showInlineLineNumbers: showInlineLineNumbers,\n      lineProps: lineProps,\n      className: className,\n      showLineNumbers: showLineNumbers,\n      wrapLongLines: wrapLongLines\n    });\n  }\n\n  function createUnwrappedLine(children, lineNumber) {\n    if (showLineNumbers && lineNumber && showInlineLineNumbers) {\n      var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n      children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n    }\n\n    return children;\n  }\n\n  function createLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return wrapLines || className.length > 0 ? createWrappedLine(children, lineNumber, className) : createUnwrappedLine(children, lineNumber);\n  }\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        }; // if it's the first line\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n\n          var _line = createLine(_children, lineNumber);\n\n          newTree.push(_line); // if it's the last line\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n\n          if (stringChild) {\n            var lastLineInPreviousSpan = {\n              type: 'text',\n              value: \"\".concat(text)\n            };\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            var _children2 = [newChild];\n\n            var _line2 = createLine(_children2, lineNumber, node.properties.className);\n\n            newTree.push(_line2);\n          } // if it's neither the first nor the last line\n\n        } else {\n          var _children3 = [newChild];\n\n          var _line3 = createLine(_children3, lineNumber, node.properties.className);\n\n          newTree.push(_line3);\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\n    if (children && children.length) {\n      var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n      var line = createLine(children, lineNumber);\n      newTree.push(line);\n    }\n  }\n\n  return wrapLines ? newTree : (_ref4 = []).concat.apply(_ref4, newTree);\n}\n\nfunction defaultRenderer(_ref5) {\n  var rows = _ref5.rows,\n      stylesheet = _ref5.stylesheet,\n      useInlineStyles = _ref5.useInlineStyles;\n  return rows.map(function (node, i) {\n    return createElement({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n} // only highlight.js has the highlightAuto method\n\n\nfunction isHighlightJs(astGenerator) {\n  return astGenerator && typeof astGenerator.highlightAuto !== 'undefined';\n}\n\nfunction getCodeTree(_ref6) {\n  var astGenerator = _ref6.astGenerator,\n      language = _ref6.language,\n      code = _ref6.code,\n      defaultCodeValue = _ref6.defaultCodeValue;\n\n  // figure out whether we're using lowlight/highlight or refractor/prism\n  // then attempt highlighting accordingly\n  // lowlight/highlight?\n  if (isHighlightJs(astGenerator)) {\n    var hasLanguage = checkForListedLanguage(astGenerator, language);\n\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  } // must be refractor/prism, then\n\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\n\nexport default function (defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref7) {\n    var language = _ref7.language,\n        children = _ref7.children,\n        _ref7$style = _ref7.style,\n        style = _ref7$style === void 0 ? defaultStyle : _ref7$style,\n        _ref7$customStyle = _ref7.customStyle,\n        customStyle = _ref7$customStyle === void 0 ? {} : _ref7$customStyle,\n        _ref7$codeTagProps = _ref7.codeTagProps,\n        codeTagProps = _ref7$codeTagProps === void 0 ? {\n      className: language ? \"language-\".concat(language) : undefined,\n      style: _objectSpread({}, style['code[class*=\"language-\"]'], style[\"code[class*=\\\"language-\".concat(language, \"\\\"]\")])\n    } : _ref7$codeTagProps,\n        _ref7$useInlineStyles = _ref7.useInlineStyles,\n        useInlineStyles = _ref7$useInlineStyles === void 0 ? true : _ref7$useInlineStyles,\n        _ref7$showLineNumbers = _ref7.showLineNumbers,\n        showLineNumbers = _ref7$showLineNumbers === void 0 ? false : _ref7$showLineNumbers,\n        _ref7$showInlineLineN = _ref7.showInlineLineNumbers,\n        showInlineLineNumbers = _ref7$showInlineLineN === void 0 ? true : _ref7$showInlineLineN,\n        _ref7$startingLineNum = _ref7.startingLineNumber,\n        startingLineNumber = _ref7$startingLineNum === void 0 ? 1 : _ref7$startingLineNum,\n        lineNumberContainerStyle = _ref7.lineNumberContainerStyle,\n        _ref7$lineNumberStyle = _ref7.lineNumberStyle,\n        lineNumberStyle = _ref7$lineNumberStyle === void 0 ? {} : _ref7$lineNumberStyle,\n        wrapLines = _ref7.wrapLines,\n        _ref7$wrapLongLines = _ref7.wrapLongLines,\n        wrapLongLines = _ref7$wrapLongLines === void 0 ? false : _ref7$wrapLongLines,\n        _ref7$lineProps = _ref7.lineProps,\n        lineProps = _ref7$lineProps === void 0 ? {} : _ref7$lineProps,\n        renderer = _ref7.renderer,\n        _ref7$PreTag = _ref7.PreTag,\n        PreTag = _ref7$PreTag === void 0 ? 'pre' : _ref7$PreTag,\n        _ref7$CodeTag = _ref7.CodeTag,\n        CodeTag = _ref7$CodeTag === void 0 ? 'code' : _ref7$CodeTag,\n        _ref7$code = _ref7.code,\n        code = _ref7$code === void 0 ? Array.isArray(children) ? children[0] : children : _ref7$code,\n        astGenerator = _ref7.astGenerator,\n        rest = _objectWithoutProperties(_ref7, [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"showInlineLineNumbers\", \"startingLineNumber\", \"lineNumberContainerStyle\", \"lineNumberStyle\", \"wrapLines\", \"wrapLongLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"]);\n\n    astGenerator = astGenerator || defaultAstGenerator;\n    var allLineNumbers = showLineNumbers ? React.createElement(AllLineNumbers, {\n      containerStyle: lineNumberContainerStyle,\n      codeStyle: codeTagProps.style || {},\n      numberStyle: lineNumberStyle,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var generatorClassName = isHighlightJs(astGenerator) ? 'hljs' : 'prismjs';\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: rest.className ? \"\".concat(generatorClassName, \" \").concat(rest.className) : generatorClassName,\n      style: Object.assign({}, customStyle)\n    });\n\n    if (!astGenerator) {\n      return React.createElement(PreTag, preProps, allLineNumbers, React.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * Some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined.\n     */\n\n\n    if (wrapLines === undefined && renderer || wrapLongLines) wrapLines = true;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    } // determine largest line number so that we can force minWidth on all linenumber elements\n\n\n    var largestLineNumber = codeTree.value.length + startingLineNumber;\n    var rows = processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines);\n\n    if (wrapLongLines) {\n      codeTagProps.style = _objectSpread({}, codeTagProps.style, {\n        whiteSpace: 'pre-wrap'\n      });\n    } else {\n      codeTagProps.style = _objectSpread({}, codeTagProps.style, {\n        whiteSpace: 'pre'\n      });\n    }\n\n    return React.createElement(PreTag, preProps, React.createElement(CodeTag, codeTagProps, !showInlineLineNumbers && allLineNumbers, renderer({\n      rows: rows,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}"],"mappings":"AAAA,OAAOA,wBAAP,MAAqC,gDAArC;AACA,OAAOC,kBAAP,MAA+B,0CAA/B;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,IAAIC,YAAY,GAAG,KAAnB;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;EACxB,OAAOA,GAAG,CAACC,KAAJ,CAAUH,YAAV,CAAP;AACD;;AAED,SAASI,iBAAT,CAA2BC,IAA3B,EAAiC;EAC/B,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;EAAA,IACIC,kBAAkB,GAAGF,IAAI,CAACE,kBAD9B;EAAA,IAEIC,KAAK,GAAGH,IAAI,CAACG,KAFjB;EAGA,OAAOF,KAAK,CAACG,GAAN,CAAU,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAC/B,IAAIC,MAAM,GAAGD,CAAC,GAAGJ,kBAAjB;IACA,OAAOV,KAAK,CAACC,aAAN,CAAoB,MAApB,EAA4B;MACjCe,GAAG,EAAE,QAAQC,MAAR,CAAeH,CAAf,CAD4B;MAEjCI,SAAS,EAAE,sCAFsB;MAGjCP,KAAK,EAAE,OAAOA,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACI,MAAD,CAAnC,GAA8CJ;IAHpB,CAA5B,EAIJ,GAAGM,MAAH,CAAUF,MAAV,EAAkB,IAAlB,CAJI,CAAP;EAKD,CAPM,CAAP;AAQD;;AAED,SAASI,cAAT,CAAwBC,KAAxB,EAA+B;EAC7B,IAAIC,UAAU,GAAGD,KAAK,CAACC,UAAvB;EAAA,IACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;EAAA,IAEIC,oBAAoB,GAAGH,KAAK,CAACI,cAFjC;EAAA,IAGIA,cAAc,GAAGD,oBAAoB,KAAK,KAAK,CAA9B,GAAkC;IACrDE,KAAK,EAAE,MAD8C;IAErDC,YAAY,EAAE;EAFuC,CAAlC,GAGjBH,oBANJ;EAAA,IAOII,iBAAiB,GAAGP,KAAK,CAACQ,WAP9B;EAAA,IAQIA,WAAW,GAAGD,iBAAiB,KAAK,KAAK,CAA3B,GAA+B,EAA/B,GAAoCA,iBARtD;EAAA,IASIjB,kBAAkB,GAAGU,KAAK,CAACV,kBAT/B;EAUA,OAAOV,KAAK,CAACC,aAAN,CAAoB,MAApB,EAA4B;IACjCU,KAAK,EAAEkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,SAAlB,EAA6BE,cAA7B;EAD0B,CAA5B,EAEJjB,iBAAiB,CAAC;IACnBE,KAAK,EAAEY,UAAU,CAACU,OAAX,CAAmB,KAAnB,EAA0B,EAA1B,EAA8BC,KAA9B,CAAoC,IAApC,CADY;IAEnBrB,KAAK,EAAEiB,WAFY;IAGnBlB,kBAAkB,EAAEA;EAHD,CAAD,CAFb,CAAP;AAOD;;AAED,SAASuB,kBAAT,CAA4BC,GAA5B,EAAiC;EAC/B,OAAO,GAAGjB,MAAH,CAAUiB,GAAG,CAACC,QAAJ,GAAeC,MAAzB,EAAiC,OAAjC,CAAP;AACD;;AAED,SAASC,mBAAT,CAA6BC,UAA7B,EAAyCC,qBAAzC,EAAgE;EAC9D,OAAO;IACLC,IAAI,EAAE,SADD;IAELC,OAAO,EAAE,MAFJ;IAGLC,UAAU,EAAE;MACV1B,GAAG,EAAE,gBAAgBC,MAAhB,CAAuBqB,UAAvB,CADK;MAEVpB,SAAS,EAAE,CAAC,SAAD,EAAY,YAAZ,EAA0B,sCAA1B,CAFD;MAGVP,KAAK,EAAE4B;IAHG,CAHP;IAQLI,QAAQ,EAAE,CAAC;MACTH,IAAI,EAAE,MADG;MAETI,KAAK,EAAEN;IAFE,CAAD;EARL,CAAP;AAaD;;AAED,SAASO,wBAAT,CAAkCC,eAAlC,EAAmDR,UAAnD,EAA+DS,iBAA/D,EAAkF;EAChF;EACA,IAAIC,sBAAsB,GAAG;IAC3BC,OAAO,EAAE,cADkB;IAE3BC,QAAQ,EAAEjB,kBAAkB,CAACc,iBAAD,CAFD;IAG3BrB,YAAY,EAAE,KAHa;IAI3ByB,SAAS,EAAE,OAJgB;IAK3BC,UAAU,EAAE;EALe,CAA7B,CAFgF,CAQ7E;;EAEH,IAAIC,qBAAqB,GAAG,OAAOP,eAAP,KAA2B,UAA3B,GAAwCA,eAAe,CAACR,UAAD,CAAvD,GAAsEQ,eAAlG,CAVgF,CAUmC;;EAEnH,IAAIQ,cAAc,GAAGvD,aAAa,CAAC,EAAD,EAAKiD,sBAAL,EAA6BK,qBAA7B,CAAlC;;EAEA,OAAOC,cAAP;AACD;;AAED,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;EAChC,IAAIb,QAAQ,GAAGa,KAAK,CAACb,QAArB;EAAA,IACIL,UAAU,GAAGkB,KAAK,CAAClB,UADvB;EAAA,IAEIQ,eAAe,GAAGU,KAAK,CAACV,eAF5B;EAAA,IAGIC,iBAAiB,GAAGS,KAAK,CAACT,iBAH9B;EAAA,IAIIU,qBAAqB,GAAGD,KAAK,CAACC,qBAJlC;EAAA,IAKIC,eAAe,GAAGF,KAAK,CAACG,SAL5B;EAAA,IAMIA,SAAS,GAAGD,eAAe,KAAK,KAAK,CAAzB,GAA6B,EAA7B,GAAkCA,eANlD;EAAA,IAOIE,eAAe,GAAGJ,KAAK,CAACtC,SAP5B;EAAA,IAQIA,SAAS,GAAG0C,eAAe,KAAK,KAAK,CAAzB,GAA6B,EAA7B,GAAkCA,eARlD;EAAA,IASIC,eAAe,GAAGL,KAAK,CAACK,eAT5B;EAAA,IAUIC,aAAa,GAAGN,KAAK,CAACM,aAV1B;EAWA,IAAIpB,UAAU,GAAG,OAAOiB,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAACrB,UAAD,CAA3C,GAA0DqB,SAA3E;EACAjB,UAAU,CAAC,WAAD,CAAV,GAA0BxB,SAA1B;;EAEA,IAAIoB,UAAU,IAAImB,qBAAlB,EAAyC;IACvC,IAAIlB,qBAAqB,GAAGM,wBAAwB,CAACC,eAAD,EAAkBR,UAAlB,EAA8BS,iBAA9B,CAApD;IACAJ,QAAQ,CAACoB,OAAT,CAAiB1B,mBAAmB,CAACC,UAAD,EAAaC,qBAAb,CAApC;EACD;;EAED,IAAIuB,aAAa,GAAGD,eAApB,EAAqC;IACnCnB,UAAU,CAAC/B,KAAX,GAAmBZ,aAAa,CAAC,EAAD,EAAK2C,UAAU,CAAC/B,KAAhB,EAAuB;MACrDsC,OAAO,EAAE;IAD4C,CAAvB,CAAhC;EAGD;;EAED,OAAO;IACLT,IAAI,EAAE,SADD;IAELC,OAAO,EAAE,MAFJ;IAGLC,UAAU,EAAEA,UAHP;IAILC,QAAQ,EAAEA;EAJL,CAAP;AAMD;;AAED,SAASqB,eAAT,CAAyBC,IAAzB,EAA+B;EAC7B,IAAI/C,SAAS,GAAGgD,SAAS,CAAC9B,MAAV,GAAmB,CAAnB,IAAwB8B,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAApF;EACA,IAAIE,OAAO,GAAGF,SAAS,CAAC9B,MAAV,GAAmB,CAAnB,IAAwB8B,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;;EAEA,KAAK,IAAIpD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmD,IAAI,CAAC7B,MAAzB,EAAiCtB,CAAC,EAAlC,EAAsC;IACpC,IAAIuD,IAAI,GAAGJ,IAAI,CAACnD,CAAD,CAAf;;IAEA,IAAIuD,IAAI,CAAC7B,IAAL,KAAc,MAAlB,EAA0B;MACxB4B,OAAO,CAACE,IAAR,CAAaf,iBAAiB,CAAC;QAC7BZ,QAAQ,EAAE,CAAC0B,IAAD,CADmB;QAE7BnD,SAAS,EAAEpB,kBAAkB,CAAC,IAAIyE,GAAJ,CAAQrD,SAAR,CAAD;MAFA,CAAD,CAA9B;IAID,CALD,MAKO,IAAImD,IAAI,CAAC1B,QAAT,EAAmB;MACxB,IAAI6B,UAAU,GAAGtD,SAAS,CAACD,MAAV,CAAiBoD,IAAI,CAAC3B,UAAL,CAAgBxB,SAAjC,CAAjB;MACAkD,OAAO,GAAGA,OAAO,CAACnD,MAAR,CAAe+C,eAAe,CAACK,IAAI,CAAC1B,QAAN,EAAgB6B,UAAhB,CAA9B,CAAV;IACD;EACF;;EAED,OAAOJ,OAAP;AACD;;AAED,SAASK,YAAT,CAAsBC,QAAtB,EAAgCC,SAAhC,EAA2ChB,SAA3C,EAAsDE,eAAtD,EAAuEJ,qBAAvE,EAA8F/C,kBAA9F,EAAkHqC,iBAAlH,EAAqID,eAArI,EAAsJgB,aAAtJ,EAAqK;EACnK,IAAIc,KAAJ;;EAEA,IAAIX,IAAI,GAAGD,eAAe,CAACU,QAAQ,CAAC9B,KAAV,CAA1B;EACA,IAAIwB,OAAO,GAAG,EAAd;EACA,IAAIS,kBAAkB,GAAG,CAAC,CAA1B;EACA,IAAIC,KAAK,GAAG,CAAZ;;EAEA,SAASC,iBAAT,CAA2BpC,QAA3B,EAAqCL,UAArC,EAAiD;IAC/C,IAAIpB,SAAS,GAAGgD,SAAS,CAAC9B,MAAV,GAAmB,CAAnB,IAAwB8B,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAApF;IACA,OAAOX,iBAAiB,CAAC;MACvBZ,QAAQ,EAAEA,QADa;MAEvBL,UAAU,EAAEA,UAFW;MAGvBQ,eAAe,EAAEA,eAHM;MAIvBC,iBAAiB,EAAEA,iBAJI;MAKvBU,qBAAqB,EAAEA,qBALA;MAMvBE,SAAS,EAAEA,SANY;MAOvBzC,SAAS,EAAEA,SAPY;MAQvB2C,eAAe,EAAEA,eARM;MASvBC,aAAa,EAAEA;IATQ,CAAD,CAAxB;EAWD;;EAED,SAASkB,mBAAT,CAA6BrC,QAA7B,EAAuCL,UAAvC,EAAmD;IACjD,IAAIuB,eAAe,IAAIvB,UAAnB,IAAiCmB,qBAArC,EAA4D;MAC1D,IAAIlB,qBAAqB,GAAGM,wBAAwB,CAACC,eAAD,EAAkBR,UAAlB,EAA8BS,iBAA9B,CAApD;MACAJ,QAAQ,CAACoB,OAAT,CAAiB1B,mBAAmB,CAACC,UAAD,EAAaC,qBAAb,CAApC;IACD;;IAED,OAAOI,QAAP;EACD;;EAED,SAASsC,UAAT,CAAoBtC,QAApB,EAA8BL,UAA9B,EAA0C;IACxC,IAAIpB,SAAS,GAAGgD,SAAS,CAAC9B,MAAV,GAAmB,CAAnB,IAAwB8B,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAApF;IACA,OAAOS,SAAS,IAAIzD,SAAS,CAACkB,MAAV,GAAmB,CAAhC,GAAoC2C,iBAAiB,CAACpC,QAAD,EAAWL,UAAX,EAAuBpB,SAAvB,CAArD,GAAyF8D,mBAAmB,CAACrC,QAAD,EAAWL,UAAX,CAAnH;EACD;;EAED,IAAI4C,KAAK,GAAG,SAASA,KAAT,GAAiB;IAC3B,IAAIb,IAAI,GAAGJ,IAAI,CAACa,KAAD,CAAf;IACA,IAAIlC,KAAK,GAAGyB,IAAI,CAAC1B,QAAL,CAAc,CAAd,EAAiBC,KAA7B;IACA,IAAIuC,QAAQ,GAAG/E,WAAW,CAACwC,KAAD,CAA1B;;IAEA,IAAIuC,QAAJ,EAAc;MACZ,IAAIC,UAAU,GAAGxC,KAAK,CAACZ,KAAN,CAAY,IAAZ,CAAjB;MACAoD,UAAU,CAACC,OAAX,CAAmB,UAAUC,IAAV,EAAgBxE,CAAhB,EAAmB;QACpC,IAAIwB,UAAU,GAAGuB,eAAe,IAAIO,OAAO,CAAChC,MAAR,GAAiB1B,kBAArD;QACA,IAAI6E,QAAQ,GAAG;UACb/C,IAAI,EAAE,MADO;UAEbI,KAAK,EAAE,GAAG3B,MAAH,CAAUqE,IAAV,EAAgB,IAAhB;QAFM,CAAf,CAFoC,CAKjC;;QAEH,IAAIxE,CAAC,KAAK,CAAV,EAAa;UACX,IAAI0E,SAAS,GAAGvB,IAAI,CAACwB,KAAL,CAAWZ,kBAAkB,GAAG,CAAhC,EAAmCC,KAAnC,EAA0C7D,MAA1C,CAAiDsC,iBAAiB,CAAC;YACjFZ,QAAQ,EAAE,CAAC4C,QAAD,CADuE;YAEjFrE,SAAS,EAAEmD,IAAI,CAAC3B,UAAL,CAAgBxB;UAFsD,CAAD,CAAlE,CAAhB;;UAKA,IAAIwE,KAAK,GAAGT,UAAU,CAACO,SAAD,EAAYlD,UAAZ,CAAtB;;UAEA8B,OAAO,CAACE,IAAR,CAAaoB,KAAb,EARW,CAQU;QACtB,CATD,MASO,IAAI5E,CAAC,KAAKsE,UAAU,CAAChD,MAAX,GAAoB,CAA9B,EAAiC;UACtC,IAAIuD,WAAW,GAAG1B,IAAI,CAACa,KAAK,GAAG,CAAT,CAAJ,IAAmBb,IAAI,CAACa,KAAK,GAAG,CAAT,CAAJ,CAAgBnC,QAAnC,IAA+CsB,IAAI,CAACa,KAAK,GAAG,CAAT,CAAJ,CAAgBnC,QAAhB,CAAyB,CAAzB,CAAjE;;UAEA,IAAIgD,WAAJ,EAAiB;YACf,IAAIC,sBAAsB,GAAG;cAC3BpD,IAAI,EAAE,MADqB;cAE3BI,KAAK,EAAE,GAAG3B,MAAH,CAAUqE,IAAV;YAFoB,CAA7B;YAIA,IAAIO,OAAO,GAAGtC,iBAAiB,CAAC;cAC9BZ,QAAQ,EAAE,CAACiD,sBAAD,CADoB;cAE9B1E,SAAS,EAAEmD,IAAI,CAAC3B,UAAL,CAAgBxB;YAFG,CAAD,CAA/B;YAIA+C,IAAI,CAAC6B,MAAL,CAAYhB,KAAK,GAAG,CAApB,EAAuB,CAAvB,EAA0Be,OAA1B;UACD,CAVD,MAUO;YACL,IAAIE,UAAU,GAAG,CAACR,QAAD,CAAjB;;YAEA,IAAIS,MAAM,GAAGf,UAAU,CAACc,UAAD,EAAazD,UAAb,EAAyB+B,IAAI,CAAC3B,UAAL,CAAgBxB,SAAzC,CAAvB;;YAEAkD,OAAO,CAACE,IAAR,CAAa0B,MAAb;UACD,CAnBqC,CAmBpC;;QAEH,CArBM,MAqBA;UACL,IAAIC,UAAU,GAAG,CAACV,QAAD,CAAjB;;UAEA,IAAIW,MAAM,GAAGjB,UAAU,CAACgB,UAAD,EAAa3D,UAAb,EAAyB+B,IAAI,CAAC3B,UAAL,CAAgBxB,SAAzC,CAAvB;;UAEAkD,OAAO,CAACE,IAAR,CAAa4B,MAAb;QACD;MACF,CA5CD;MA6CArB,kBAAkB,GAAGC,KAArB;IACD;;IAEDA,KAAK;EACN,CAxDD;;EA0DA,OAAOA,KAAK,GAAGb,IAAI,CAAC7B,MAApB,EAA4B;IAC1B8C,KAAK;EACN;;EAED,IAAIL,kBAAkB,KAAKZ,IAAI,CAAC7B,MAAL,GAAc,CAAzC,EAA4C;IAC1C,IAAIO,QAAQ,GAAGsB,IAAI,CAACwB,KAAL,CAAWZ,kBAAkB,GAAG,CAAhC,EAAmCZ,IAAI,CAAC7B,MAAxC,CAAf;;IAEA,IAAIO,QAAQ,IAAIA,QAAQ,CAACP,MAAzB,EAAiC;MAC/B,IAAIE,UAAU,GAAGuB,eAAe,IAAIO,OAAO,CAAChC,MAAR,GAAiB1B,kBAArD;MACA,IAAIyF,IAAI,GAAGlB,UAAU,CAACtC,QAAD,EAAWL,UAAX,CAArB;MACA8B,OAAO,CAACE,IAAR,CAAa6B,IAAb;IACD;EACF;;EAED,OAAOxB,SAAS,GAAGP,OAAH,GAAa,CAACQ,KAAK,GAAG,EAAT,EAAa3D,MAAb,CAAoBmF,KAApB,CAA0BxB,KAA1B,EAAiCR,OAAjC,CAA7B;AACD;;AAED,SAASiC,eAAT,CAAyBC,KAAzB,EAAgC;EAC9B,IAAIC,IAAI,GAAGD,KAAK,CAACC,IAAjB;EAAA,IACIC,UAAU,GAAGF,KAAK,CAACE,UADvB;EAAA,IAEIC,eAAe,GAAGH,KAAK,CAACG,eAF5B;EAGA,OAAOF,IAAI,CAAC3F,GAAL,CAAS,UAAUyD,IAAV,EAAgBvD,CAAhB,EAAmB;IACjC,OAAOb,aAAa,CAAC;MACnBoE,IAAI,EAAEA,IADa;MAEnBmC,UAAU,EAAEA,UAFO;MAGnBC,eAAe,EAAEA,eAHE;MAInBzF,GAAG,EAAE,gBAAgBC,MAAhB,CAAuBH,CAAvB;IAJc,CAAD,CAApB;EAMD,CAPM,CAAP;AAQD,C,CAAC;;;AAGF,SAAS4F,aAAT,CAAuBC,YAAvB,EAAqC;EACnC,OAAOA,YAAY,IAAI,OAAOA,YAAY,CAACC,aAApB,KAAsC,WAA7D;AACD;;AAED,SAASC,WAAT,CAAqBC,KAArB,EAA4B;EAC1B,IAAIH,YAAY,GAAGG,KAAK,CAACH,YAAzB;EAAA,IACII,QAAQ,GAAGD,KAAK,CAACC,QADrB;EAAA,IAEIC,IAAI,GAAGF,KAAK,CAACE,IAFjB;EAAA,IAGIC,gBAAgB,GAAGH,KAAK,CAACG,gBAH7B,CAD0B,CAM1B;EACA;EACA;;EACA,IAAIP,aAAa,CAACC,YAAD,CAAjB,EAAiC;IAC/B,IAAIO,WAAW,GAAGhH,sBAAsB,CAACyG,YAAD,EAAeI,QAAf,CAAxC;;IAEA,IAAIA,QAAQ,KAAK,MAAjB,EAAyB;MACvB,OAAO;QACLnE,KAAK,EAAEqE,gBADF;QAELF,QAAQ,EAAE;MAFL,CAAP;IAID,CALD,MAKO,IAAIG,WAAJ,EAAiB;MACtB,OAAOP,YAAY,CAACQ,SAAb,CAAuBJ,QAAvB,EAAiCC,IAAjC,CAAP;IACD,CAFM,MAEA;MACL,OAAOL,YAAY,CAACC,aAAb,CAA2BI,IAA3B,CAAP;IACD;EACF,CAtByB,CAsBxB;;;EAGF,IAAI;IACF,OAAOD,QAAQ,IAAIA,QAAQ,KAAK,MAAzB,GAAkC;MACvCnE,KAAK,EAAE+D,YAAY,CAACQ,SAAb,CAAuBH,IAAvB,EAA6BD,QAA7B;IADgC,CAAlC,GAEH;MACFnE,KAAK,EAAEqE;IADL,CAFJ;EAKD,CAND,CAME,OAAOG,CAAP,EAAU;IACV,OAAO;MACLxE,KAAK,EAAEqE;IADF,CAAP;EAGD;AACF;;AAED,eAAe,UAAUI,mBAAV,EAA+BC,YAA/B,EAA6C;EAC1D,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;IACvC,IAAIT,QAAQ,GAAGS,KAAK,CAACT,QAArB;IAAA,IACIpE,QAAQ,GAAG6E,KAAK,CAAC7E,QADrB;IAAA,IAEI8E,WAAW,GAAGD,KAAK,CAAC7G,KAFxB;IAAA,IAGIA,KAAK,GAAG8G,WAAW,KAAK,KAAK,CAArB,GAAyBH,YAAzB,GAAwCG,WAHpD;IAAA,IAIIC,iBAAiB,GAAGF,KAAK,CAACG,WAJ9B;IAAA,IAKIA,WAAW,GAAGD,iBAAiB,KAAK,KAAK,CAA3B,GAA+B,EAA/B,GAAoCA,iBALtD;IAAA,IAMIE,kBAAkB,GAAGJ,KAAK,CAACK,YAN/B;IAAA,IAOIA,YAAY,GAAGD,kBAAkB,KAAK,KAAK,CAA5B,GAAgC;MACjD1G,SAAS,EAAE6F,QAAQ,GAAG,YAAY9F,MAAZ,CAAmB8F,QAAnB,CAAH,GAAkC5C,SADJ;MAEjDxD,KAAK,EAAEZ,aAAa,CAAC,EAAD,EAAKY,KAAK,CAAC,0BAAD,CAAV,EAAwCA,KAAK,CAAC,0BAA0BM,MAA1B,CAAiC8F,QAAjC,EAA2C,KAA3C,CAAD,CAA7C;IAF6B,CAAhC,GAGfa,kBAVJ;IAAA,IAWIE,qBAAqB,GAAGN,KAAK,CAACf,eAXlC;IAAA,IAYIA,eAAe,GAAGqB,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,IAAnC,GAA0CA,qBAZhE;IAAA,IAaIC,qBAAqB,GAAGP,KAAK,CAAC3D,eAblC;IAAA,IAcIA,eAAe,GAAGkE,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBAdjE;IAAA,IAeIC,qBAAqB,GAAGR,KAAK,CAAC/D,qBAflC;IAAA,IAgBIA,qBAAqB,GAAGuE,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,IAAnC,GAA0CA,qBAhBtE;IAAA,IAiBIC,qBAAqB,GAAGT,KAAK,CAAC9G,kBAjBlC;IAAA,IAkBIA,kBAAkB,GAAGuH,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,CAAnC,GAAuCA,qBAlBhE;IAAA,IAmBIC,wBAAwB,GAAGV,KAAK,CAACU,wBAnBrC;IAAA,IAoBIC,qBAAqB,GAAGX,KAAK,CAAC1E,eApBlC;IAAA,IAqBIA,eAAe,GAAGqF,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBArB9D;IAAA,IAsBIxD,SAAS,GAAG6C,KAAK,CAAC7C,SAtBtB;IAAA,IAuBIyD,mBAAmB,GAAGZ,KAAK,CAAC1D,aAvBhC;IAAA,IAwBIA,aAAa,GAAGsE,mBAAmB,KAAK,KAAK,CAA7B,GAAiC,KAAjC,GAAyCA,mBAxB7D;IAAA,IAyBIC,eAAe,GAAGb,KAAK,CAAC7D,SAzB5B;IAAA,IA0BIA,SAAS,GAAG0E,eAAe,KAAK,KAAK,CAAzB,GAA6B,EAA7B,GAAkCA,eA1BlD;IAAA,IA2BIC,QAAQ,GAAGd,KAAK,CAACc,QA3BrB;IAAA,IA4BIC,YAAY,GAAGf,KAAK,CAACgB,MA5BzB;IAAA,IA6BIA,MAAM,GAAGD,YAAY,KAAK,KAAK,CAAtB,GAA0B,KAA1B,GAAkCA,YA7B/C;IAAA,IA8BIE,aAAa,GAAGjB,KAAK,CAACkB,OA9B1B;IAAA,IA+BIA,OAAO,GAAGD,aAAa,KAAK,KAAK,CAAvB,GAA2B,MAA3B,GAAoCA,aA/BlD;IAAA,IAgCIE,UAAU,GAAGnB,KAAK,CAACR,IAhCvB;IAAA,IAiCIA,IAAI,GAAG2B,UAAU,KAAK,KAAK,CAApB,GAAwBC,KAAK,CAACC,OAAN,CAAclG,QAAd,IAA0BA,QAAQ,CAAC,CAAD,CAAlC,GAAwCA,QAAhE,GAA2EgG,UAjCtF;IAAA,IAkCIhC,YAAY,GAAGa,KAAK,CAACb,YAlCzB;IAAA,IAmCImC,IAAI,GAAGjJ,wBAAwB,CAAC2H,KAAD,EAAQ,CAAC,UAAD,EAAa,UAAb,EAAyB,OAAzB,EAAkC,aAAlC,EAAiD,cAAjD,EAAiE,iBAAjE,EAAoF,iBAApF,EAAuG,uBAAvG,EAAgI,oBAAhI,EAAsJ,0BAAtJ,EAAkL,iBAAlL,EAAqM,WAArM,EAAkN,eAAlN,EAAmO,WAAnO,EAAgP,UAAhP,EAA4P,QAA5P,EAAsQ,SAAtQ,EAAiR,MAAjR,EAAyR,cAAzR,CAAR,CAnCnC;;IAqCAb,YAAY,GAAGA,YAAY,IAAIU,mBAA/B;IACA,IAAI0B,cAAc,GAAGlF,eAAe,GAAG7D,KAAK,CAACC,aAAN,CAAoBkB,cAApB,EAAoC;MACzEK,cAAc,EAAE0G,wBADyD;MAEzE5G,SAAS,EAAEuG,YAAY,CAAClH,KAAb,IAAsB,EAFwC;MAGzEiB,WAAW,EAAEkB,eAH4D;MAIzEpC,kBAAkB,EAAEA,kBAJqD;MAKzEW,UAAU,EAAE2F;IAL6D,CAApC,CAAH,GAM/B,IANL;IAOA,IAAIgC,eAAe,GAAGrI,KAAK,CAACsI,IAAN,IAActI,KAAK,CAAC,yBAAD,CAAnB,IAAkD;MACtEuI,eAAe,EAAE;IADqD,CAAxE;IAGA,IAAIC,kBAAkB,GAAGzC,aAAa,CAACC,YAAD,CAAb,GAA8B,MAA9B,GAAuC,SAAhE;IACA,IAAIyC,QAAQ,GAAG3C,eAAe,GAAG5E,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBgH,IAAlB,EAAwB;MACvDnI,KAAK,EAAEkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBkH,eAAlB,EAAmCrB,WAAnC;IADgD,CAAxB,CAAH,GAEzB9F,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBgH,IAAlB,EAAwB;MAC3B5H,SAAS,EAAE4H,IAAI,CAAC5H,SAAL,GAAiB,GAAGD,MAAH,CAAUkI,kBAAV,EAA8B,GAA9B,EAAmClI,MAAnC,CAA0C6H,IAAI,CAAC5H,SAA/C,CAAjB,GAA6EiI,kBAD7D;MAE3BxI,KAAK,EAAEkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB6F,WAAlB;IAFoB,CAAxB,CAFL;;IAOA,IAAI,CAAChB,YAAL,EAAmB;MACjB,OAAO3G,KAAK,CAACC,aAAN,CAAoBuI,MAApB,EAA4BY,QAA5B,EAAsCL,cAAtC,EAAsD/I,KAAK,CAACC,aAAN,CAAoByI,OAApB,EAA6Bb,YAA7B,EAA2Cb,IAA3C,CAAtD,CAAP;IACD;IACD;AACJ;AACA;AACA;;;IAGI,IAAIrC,SAAS,KAAKR,SAAd,IAA2BmE,QAA3B,IAAuCxE,aAA3C,EAA0Da,SAAS,GAAG,IAAZ;IAC1D2D,QAAQ,GAAGA,QAAQ,IAAIjC,eAAvB;IACA,IAAIY,gBAAgB,GAAG,CAAC;MACtBzE,IAAI,EAAE,MADgB;MAEtBI,KAAK,EAAEoE;IAFe,CAAD,CAAvB;IAIA,IAAItC,QAAQ,GAAGmC,WAAW,CAAC;MACzBF,YAAY,EAAEA,YADW;MAEzBI,QAAQ,EAAEA,QAFe;MAGzBC,IAAI,EAAEA,IAHmB;MAIzBC,gBAAgB,EAAEA;IAJO,CAAD,CAA1B;;IAOA,IAAIvC,QAAQ,CAACqC,QAAT,KAAsB,IAA1B,EAAgC;MAC9BrC,QAAQ,CAAC9B,KAAT,GAAiBqE,gBAAjB;IACD,CAjFsC,CAiFrC;;;IAGF,IAAIlE,iBAAiB,GAAG2B,QAAQ,CAAC9B,KAAT,CAAeR,MAAf,GAAwB1B,kBAAhD;IACA,IAAI6F,IAAI,GAAG9B,YAAY,CAACC,QAAD,EAAWC,SAAX,EAAsBhB,SAAtB,EAAiCE,eAAjC,EAAkDJ,qBAAlD,EAAyE/C,kBAAzE,EAA6FqC,iBAA7F,EAAgHD,eAAhH,EAAiIgB,aAAjI,CAAvB;;IAEA,IAAIA,aAAJ,EAAmB;MACjB+D,YAAY,CAAClH,KAAb,GAAqBZ,aAAa,CAAC,EAAD,EAAK8H,YAAY,CAAClH,KAAlB,EAAyB;QACzD0I,UAAU,EAAE;MAD6C,CAAzB,CAAlC;IAGD,CAJD,MAIO;MACLxB,YAAY,CAAClH,KAAb,GAAqBZ,aAAa,CAAC,EAAD,EAAK8H,YAAY,CAAClH,KAAlB,EAAyB;QACzD0I,UAAU,EAAE;MAD6C,CAAzB,CAAlC;IAGD;;IAED,OAAOrJ,KAAK,CAACC,aAAN,CAAoBuI,MAApB,EAA4BY,QAA5B,EAAsCpJ,KAAK,CAACC,aAAN,CAAoByI,OAApB,EAA6Bb,YAA7B,EAA2C,CAACpE,qBAAD,IAA0BsF,cAArE,EAAqFT,QAAQ,CAAC;MACzI/B,IAAI,EAAEA,IADmI;MAEzIC,UAAU,EAAE7F,KAF6H;MAGzI8F,eAAe,EAAEA;IAHwH,CAAD,CAA7F,CAAtC,CAAP;EAKD,CAtGD;AAuGD"},"metadata":{},"sourceType":"module"}